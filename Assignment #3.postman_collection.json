{
	"info": {
		"_postman_id": "73c1e4a6-ecc0-4713-b36c-a47c14a29f45",
		"name": "Assignment #3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19231508"
	},
	"item": [
		{
			"name": "API requests",
			"item": [
				{
					"name": "Get an order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response=pm.response.json();",
									"",
									"pm.test(\"Response body is a Json are not\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response body contains a property id\", function () {",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response.id).to.match(/^[A-Z0-9]{9}$/);",
									"});",
									"",
									"pm.test(\"Response body contians a property products\", function () {",
									"    pm.expect(response).to.have.property('products');",
									"    pm.expect(response.products).to.be.a('array');",
									"});",
									"",
									"// pm.expect(response).to.have.property('id');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "ac02cf147ac544432530fd6b0e212e58b8ac7014",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "RPGKUL5WO"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check your solution",
			"item": [
				{
					"name": "Verify your solution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let collection = pm.response.json().collection",
									"",
									"pm.test(\"If you have any failures, review the failed test results or ask for support in the community forum. Remember to save your changes if you update the collection.\", () => {",
									"});",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Correct collection returned\", () => {",
									"    pm.expect(collection.info.name).contains(\"Assignment #3\")",
									"});",
									"",
									"pm.test(\"API key secure\", () => {",
									"    let apiKey = collection.variable.find(item => { return item.key === \"postman_api_key\"});",
									"    pm.expect(apiKey.value, 'API key visible under Initial value').does.not.include(\"PMAK\");",
									"});",
									"",
									"let folder = collection.item.find(fol => {return fol.name === \"API requests\"});",
									"",
									"pm.test(\"Task 1: Response is JSON.\", () => {",
									"    let subFolder;",
									"",
									"    request = folder.item.find(r => { return r.name === \"Get an order by ID\"});",
									"    pm.expect(request).to.be.an('object', 'Request \"Get an order by ID\" not found.');",
									"    pm.expect(request.event).to.be.an('array', 'The request has no scripts');",
									"    let tests = request.event.find(event => event.listen === 'test');",
									"    pm.expect(tests).to.be.an('object', 'The request has no test script.');",
									"    pm.expect(tests.script.exec.toString(), 'check script').includes(\"pm.test\");",
									"    pm.expect(tests.script.exec.toString(), 'check script').includes(\"pm.response.to.be.json\");",
									"});",
									"",
									"pm.test(\"Task 2: Property `id` exists and has the expected format\", () => {",
									"    let subFolder;",
									"",
									"    request = folder.item.find(r => { return r.name === \"Get an order by ID\"});",
									"    pm.expect(request).to.be.an('object', 'Request \"Get an order by ID\" not found.');",
									"    pm.expect(request.event).to.be.an('array', 'The request has no scripts');",
									"    let tests = request.event.find(event => event.listen === 'test');",
									"    pm.expect(tests).to.be.an('object', 'The request has no test script.');",
									"    pm.expect(tests.script.exec.toString(), 'check script').includes(\"pm.test\");",
									"    pm.expect(tests.script.exec.toString(), 'check script').includes(\"to.have.property\");",
									"    pm.expect(tests.script.exec.toString(), 'check script').includes(\"to.match(/^[A-Z0-9]{9}$/)\");",
									"});",
									"",
									"",
									"pm.test(\"Task 3: Property 'products' exists and is an array\", () => {",
									"    let subFolder;",
									"",
									"    request = folder.item.find(r => { return r.name === \"Get an order by ID\"});",
									"    pm.expect(request).to.be.an('object', 'Request \"Get an order by ID\" not found.');",
									"    pm.expect(request.event).to.be.an('array', 'The request has no scripts');",
									"    let tests = request.event.find(event => event.listen === 'test');",
									"    pm.expect(tests).to.be.an('object', 'The request has no test script.');",
									"    pm.expect(tests.script.exec.toString(), 'check script').includes(\"pm.test\");",
									"    pm.expect(tests.script.exec.toString(), 'check script').to.contain.oneOf([`to.have.property('products')`, `to.have.property(\"products\")`]);",
									"    pm.expect(tests.script.exec.toString(), 'check script').to.contain.oneOf([`to.be.an('array')`, `to.be.an(\"array\")`, `to.be.a('array')`, `to.be.a(\"array\")`]);    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/collections/:collectionId?apikey={{postman_api_key}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								":collectionId"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{postman_api_key}}"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{collectionId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "collectionId",
			"value": "",
			"type": "string"
		},
		{
			"key": "postman_api_key",
			"value": "",
			"type": "string"
		}
	]
}